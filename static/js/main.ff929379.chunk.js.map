{"version":3,"sources":["helpers/classnames.ts","theme/theme.ts","pages/MainPage/index.tsx","firebaseConfig.ts","pages/Options/index.tsx","types/index.tsx","components/Tasks/TaskItem.tsx","components/Tasks/index.tsx","pages/CreateList/index.tsx","routes/routesList.ts","routes/index.tsx","components/AppBar/NavigationBar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["classnames","defaultNames","conditionalClasses","Object","keys","reduce","classes","currentKey","concat","join","theme","createMuiTheme","palette","primary","main","contrastText","secondary","background","default","paper","action","active","text","useStyles","makeStyles","contrastTextColor","color","title","fontSize","lineHeight","boldText","fontWeight","thinText","limitedWidth","maxWidth","primaryBackground","secondaryTextColor","primaryButton","marginTop","link","display","secondaryCta","padding","textAlign","subtitle","content","paddingTop","paddingBottom","MainPage","Container","className","Typography","variant","Button","href","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","collection","databaseDoc","id","doc","margin","buttons","inputPaper","error","red","Options","props","React","useState","existing","setExisting","input","setInput","setError","onClick","Paper","Input","type","autoFocus","onChange","event","target","value","onFocus","get","then","data","history","push","catch","DEFAULT_TASK","checked","createStyles","width","TaskItem","saveText","completeTask","task","index","selected","setSelected","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","TextField","onBlur","ListItemText","toString","ListItemSecondaryAction","IconButton","aria-label","root","item","backgroundColor","borderRadius","Tasks","tasks","List","map","ListItem","key","position","heading","marginBottom","buttonWrapper","saveButton","height","right","addButton","CreateList","setTasks","loading","setLoading","changed","setChanged","location","hash","slice","listId","changeTask","currentTasks","currentTask","selectedTask","splice","useEffect","length","Fab","set","password","add","result","console","log","CircularProgress","size","routes","path","component","Routes","route","exact","primaryHeader","secondaryHeader","header","cursor","bar","boxShadow","NavigationBar","AppBar","Link","App","ThemeProvider","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ff929379.chunk.js","sourcesContent":["interface ClassObject {\n  [key: string]: boolean\n}\n\nfunction classnames(defaultNames: string[], conditionalClasses?: ClassObject) {\n  return conditionalClasses\n    ? Object.keys(conditionalClasses).reduce((classes, currentKey) => (\n      (!!conditionalClasses[currentKey])\n        ? (classes as string).concat(' ' + currentKey)\n        : classes\n    ), defaultNames.join(' '))\n    : defaultNames.join(' ')\n}\n\nexport default classnames","import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#D2FD9B',\n      contrastText: '#3B3871'\n    },\n    secondary: {\n      main: '#FFFFFF',\n      contrastText: '#3B3871',\n    },\n    background: {\n      default: '#5A56AB',\n      paper: '#948EFD',\n    },\n    action: {\n      active: '#D2FD9B',\n    },\n    text: {\n      primary: '#D2FD9B',\n      secondary: '#FFFFFF',\n    },\n  },\n});\n\nexport default theme;","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport { makeStyles, Theme, Button } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\n\nimport classnames from 'helpers/classnames';\n\nimport theme from 'theme/theme';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  contrastTextColor: {\n    color: theme.palette.primary.contrastText,\n  },\n  title: {\n    fontSize: '500%',\n    lineHeight: 1,\n  },\n  boldText: {\n    fontWeight: 700,\n  },\n  thinText: {\n    fontWeight: 300,\n  },\n  limitedWidth: {\n    maxWidth: '70%',\n  },\n  primaryBackground: {\n    background: theme.palette.action.active,\n  },\n  contrastText: {\n    color: theme.palette.primary.contrastText,\n  },\n  secondaryTextColor: {\n    color: theme.palette.text.secondary,\n  },\n  primaryButton: {\n    marginTop: '30px',\n    '&:hover': {\n      background: theme.palette.action.active,\n    },\n  },\n  link: {\n    display: 'flex',\n  },\n  secondaryCta: {\n    padding: '300px 0 100px 0',\n    textAlign: 'center',\n  },\n  subtitle: {\n    marginTop: '50px',\n  },\n  content: {\n    paddingTop: '300px',\n    paddingBottom: '100px',\n  },\n}))\n\nconst MainPage: React.FC = () => {\n  const classes = useStyles(theme)\n\n  return (\n    <Container className={classes.content}>\n      <Typography\n        variant=\"h1\"\n        className={classnames([classes.secondaryTextColor, classes.limitedWidth, classes.thinText, classes.title])}\n      >\n        {'Plan and share'}\n      </Typography>\n\n      <Typography\n        variant=\"subtitle1\"\n        className={classnames([classes.subtitle, classes.secondaryTextColor, classes.limitedWidth, classes.thinText])}\n      >\n        {'Create your planning lists.'}\n        <br />\n        {'Share your goals with your friends.'}\n      </Typography>\n\n      <Button className={classnames([classes.primaryBackground, classes.primaryButton])} href=\"/list\">\n        <Typography className={classnames([classes.contrastText, classes.boldText])}>\n          {'get strarted'}\n        </Typography>\n\n        <ArrowForwardIcon className={classnames([classes.contrastText, classes.boldText])} />\n      </Button>\n\n    </Container>\n  );\n}\n\nexport default MainPage;\n","import firebase from 'firebase'\nimport 'firebase/firestore'\n\nconst firebaseConfig: object = {\n    apiKey: \"AIzaSyC7uneQxy3xT7psDWsSrQFu-mnLI67b1A0\",\n    authDomain: \"hilfsbereit-fbdb4.firebaseapp.com\",\n    databaseURL: \"https://hilfsbereit-fbdb4.firebaseio.com\",\n    projectId: \"hilfsbereit-fbdb4\",\n    storageBucket: \"hilfsbereit-fbdb4.appspot.com\",\n    messagingSenderId: \"453745012754\",\n    appId: \"1:453745012754:web:acfaa902f7f8430397e8cb\",\n    measurementId: \"G-LH28QKZ89E\"\n};\n\nexport const database = firebase.initializeApp(firebaseConfig).firestore().collection('lists')\n\nexport const databaseDoc = (id: string) => database.doc(id)","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { red } from '@material-ui/core/colors';\n\nimport { makeStyles, Theme, Button, Paper, Input } from '@material-ui/core';\n\nimport theme from 'theme/theme';\nimport { PageProps } from 'types';\nimport { databaseDoc } from 'firebaseConfig';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  content: {\n    color: theme.palette.text.secondary,\n    textAlign: 'center',\n    margin: '200px auto 100px auto',\n  },\n  buttons: {\n    marginTop: '100px',\n  },\n  inputPaper: {\n    maxWidth: '200px',\n    margin: '50px auto',\n    padding: '10px',\n  },\n  error: {\n    color: red[900],\n  },\n}))\n\nconst Options: React.FC<PageProps> = (props) => {\n  const classes = useStyles(theme)\n  const [existing, setExisting] = React.useState(false)\n  const [input, setInput] = React.useState('')\n  const [error, setError] = React.useState(false)\n\n  const goToList = () => {\n    databaseDoc(input).get()\n      .then(doc => {\n        const data = doc.data()\n\n        if (!data) {\n          setError(true)\n        } else {\n          props.history.push(`/list/create#${input}`)\n        }\n      })\n      .catch(() => {\n        setError(true)\n      })\n  }\n\n  return (\n    <Container className={classes.content}>\n      <Typography variant=\"h2\">\n        {'Start new list or get an access'}\n      </Typography>\n\n      <div className={classes.buttons}>\n        <Button href=\"list/create\">{'Create'}</Button>\n        <Button onClick={() => setExisting(!existing)}>{'Use Existing'}</Button>\n      </div>\n\n      {existing && (\n        <Paper className={classes.inputPaper}>\n          <Input\n            type=\"standard\"\n            autoFocus\n            onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => setInput(event?.target.value)}\n            onFocus={() => setError(false)}\n            value={input}\n          />\n\n          {error && (\n            <Typography className={classes.error}>\n              {'Error'}\n            </Typography>\n          )}\n\n          <Button onClick={goToList}>\n            {'Go'}\n          </Button>\n        </Paper>\n      )}\n    </Container>\n  );\n}\n\nexport default Options;\n","export interface Task {\n  text: string,\n  checked: boolean,\n}\n\nexport interface PageProps {\n  history: {\n    push: (newPath: string) => void,\n  },\n  location: {\n    hash: string,\n  }\n}\n\nexport const DEFAULT_TASK: Task = { text: '', checked: false }\nexport const DEFAULT_TASK_TEXT: string = 'Nothing yet...'","import React from 'react';\n\nimport { Task, DEFAULT_TASK_TEXT } from 'types';\n\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport { TextField, Theme, createStyles, makeStyles } from '@material-ui/core';\n\ninterface TaskItemProps {\n  completeTask: (event: any) => any,\n  saveText: (index: number, text: string) => void,\n  task: Task,\n  index: number,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    input: {\n      width: '60%',\n    },\n  }),\n)\n\nconst TaskItem = (props: TaskItemProps) => {\n  const {\n    saveText,\n    completeTask,\n    task: {\n      checked,\n      text,\n    },\n    index,\n  } = props\n\n  const [selected, setSelected] = React.useState(false)\n  const [input, setInput] = React.useState(text)\n  const classes = useStyles()\n\n  const onTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value)\n  }\n\n  const onBlur = (index: number, text: string) => {\n    setSelected(false)\n    saveText(index, text)\n  }\n\n  return (\n    <>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          checked={checked}\n          tabIndex={-1}\n          disableRipple\n          onClick={() => completeTask(index)}\n          inputProps={{ 'aria-labelledby': `task-item-${index}` }}\n        />\n      </ListItemIcon>\n\n      {selected\n        ? (\n          <TextField\n            onBlur={() => onBlur(index, input)}\n            onChange={onTextChange}\n            value={input || text}\n            autoFocus\n            className={classes.input}\n          />\n        )\n        : <ListItemText id={index.toString()} primary={text || DEFAULT_TASK_TEXT} />\n      }\n\n      <ListItemSecondaryAction>\n        <IconButton aria-label=\"comments\" onClick={() => setSelected(!selected)}>\n          <CommentIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </>\n  )\n}\n\nexport default TaskItem","import React from 'react';\n\nimport { Task } from 'types';\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport TaskItem from './TaskItem';\n\ninterface TasksProps {\n  completeTask: (event: any) => any,\n  saveText: (index: number, text: string) => void,\n  tasks: Array<Task>,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      \n    },\n    item: {\n      margin: '5px 0',\n      padding: '20px 40px',\n      backgroundColor: theme.palette.background.paper,\n      borderRadius: '4px',\n    },\n  }),\n);\n\nconst Tasks: React.FC<TasksProps> = (props) => {\n  const {\n    completeTask,\n    saveText,\n    tasks,\n  } = props\n\n  const classes = useStyles()\n\n  return (\n    <List className={classes.root}>\n      {tasks.map((task, index) => (\n        <ListItem key={index} className={classes.item}>\n          <TaskItem\n            index={index}\n            completeTask={completeTask}\n            task={task}\n            saveText={saveText}\n          />\n        </ListItem>\n        )\n      )}\n    </List>\n  )\n}\n\nexport default Tasks","import React, { useEffect } from 'react';\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport { DEFAULT_TASK, PageProps } from 'types';\n\nimport Container from '@material-ui/core/Container';\nimport { Typography, Button, CircularProgress, Fab } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add'\n\nimport Tasks from 'components/Tasks';\n\nimport { database, databaseDoc } from 'firebaseConfig';\n\nconst MAXIMUM_TASKS = 8\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n      color: theme.palette.text.secondary,\n      textAlign: 'center',\n      position: 'relative',\n      margin: '100px auto',\n    },\n    heading: {\n      textAlign: 'right',\n      marginBottom: '50px',\n    },\n    buttonWrapper: {\n      textAlign: 'left',\n      position: 'relative',\n    },\n    saveButton: {\n      background: theme.palette.background.paper,\n      fontSize: '20px',\n      height: '47px',\n      width: '100px',\n      position: 'absolute',\n      right: 0,\n      '&:hover': {\n        background: theme.palette.background.paper,\n      },\n    },\n    addButton: {\n      fontSize: '30px',\n      fontWeight: 700,\n      borderRadius: '100%',\n      '&:hover': {\n        background: theme.palette.primary.main,\n        color: theme.palette.primary.contrastText,\n      },\n    },\n  }),\n)\n\nconst CreateList: React.FC<PageProps> = (props) => {\n  const classes = useStyles()\n  const [tasks, setTasks] = React.useState([DEFAULT_TASK])\n  const [loading, setLoading] = React.useState(false)\n  const [changed, setChanged] = React.useState(false)\n  const [listId] = React.useState(props.location?.hash?.slice(1))\n\n  const changeTask = (index: number, text?: string) => {\n    setLoading(false)\n    const currentTasks = [...tasks]\n    const currentTask = currentTasks[index]\n\n    const selectedTask = text\n      ? { text, checked: currentTask.checked }\n      : { text: currentTask.text, checked: !currentTask.checked }\n\n    currentTasks.splice(index, 1, selectedTask)\n\n    setTasks(currentTasks)\n    setChanged(true)\n  }\n\n  useEffect(() => {\n    if (listId) {\n      setChanged(true);\n\n      databaseDoc(listId).get()\n        .then((doc: any) => {\n          const data = doc.data()\n          setTasks(data.tasks)\n        })\n    }\n  }, [props.history, listId, setTasks])\n\n  const saveList = () => {\n    setLoading(true);\n\n    (!listId.length\n      ? (database as any).add({\n        password: 'asd',\n        tasks,\n      })\n      : databaseDoc(listId).set({\n        password: 'asd',\n        tasks,\n      }))\n      .then((result: any) => {\n        props.history.push(`/list/create#${result.id}`)\n        setLoading(false)\n      })\n      .catch((error: any) => {\n        setLoading(false)\n        console.log('Error catched!', error)\n      });\n  }\n\n  const addTask = () => {\n    setChanged(true)\n    tasks.length < MAXIMUM_TASKS && setTasks(tasks.concat(DEFAULT_TASK))\n  }\n\n  return (\n    <Container className={classes.content}>\n\n      <Typography variant=\"h2\" className={classes.heading}>\n        {changed ? 'List' : 'New list'}\n      </Typography>\n\n      {listId && (\n        <Typography variant=\"subtitle1\">\n          <b>{'id: '}</b>\n          {listId}\n        </Typography>\n      )}\n\n      <Tasks tasks={tasks} completeTask={changeTask} saveText={changeTask} />\n\n      <Container className={classes.buttonWrapper}>\n        {tasks.length < MAXIMUM_TASKS && !loading && (\n          <Fab color=\"primary\" aria-label=\"add\" className={classes.addButton} onClick={addTask}>\n            <AddIcon />\n          </Fab>\n        )}\n\n        {changed && (\n          <Button onClick={saveList} className={classes.saveButton}>\n            {loading ? <CircularProgress size={30} /> : 'Save'}\n          </Button>\n        )}\n      </Container>\n    </Container>\n  )\n}\n\nexport default CreateList","import MainPage from 'pages/MainPage';\nimport Options from 'pages/Options';\nimport CreateList from 'pages/CreateList';\n\nimport { RouteProps } from 'react-router';\n\n\nconst routes: Array<RouteProps> = [\n  { path: '/', component: MainPage },\n  { path: '/list', component: Options },\n  { path: '/list/create', component: CreateList },\n  { path: '/list/create/#:id', component: CreateList },\n]\n\nexport default routes","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport routes from './routesList';\nimport MainPage from 'pages/MainPage';\n\nconst Routes: React.FC = () => (\n  <Router>\n    <Switch>\n      {routes.map((route, index) => <Route key={index} exact {...route} />)}\n      <Route key={'default'} component={MainPage} />\n    </Switch>\n  </Router>\n)\n\nexport default Routes","import React from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme, AppBar, Container, Link } from '@material-ui/core';\n\nimport theme from 'theme/theme';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  primaryHeader: {\n    fontWeight: 700,\n  },\n  secondaryHeader: {\n    fontWeight: 300,\n  },\n  header: {\n    fontSize: '14px',\n    padding: '10px 30px',\n    lineHeight: 1.2,\n    color: theme.palette.text.secondary,\n    '&:hover': {\n      color: theme.palette.text.primary, \n      cursor: 'pointer',\n    }\n  },\n  bar: {\n    background: 'transparent',\n    boxShadow: 'none',\n  }\n}))\n\nconst NavigationBar: React.FC = () => {\n  const classes = useStyles(theme)\n\n  return (\n    <AppBar className={classes.bar}>\n      <Container className={classes.header}>\n        <Link href=\"/\">\n          <Typography variant=\"subtitle1\" className={classes.primaryHeader}>\n            {'Hilfsbereit'}\n          </Typography>\n\n          <Typography variant=\"subtitle1\" className={classes.secondaryHeader}>\n            {'If you need a hand'}\n          </Typography>\n        </Link>\n      </Container>\n    </AppBar>\n  );\n}\n\nexport default NavigationBar;","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core';\n\nimport Routes from 'routes'\nimport NavigationBar from 'components/AppBar/NavigationBar';\n\nimport theme from 'theme/theme';\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <NavigationBar />\n      <Routes />\n    </ThemeProvider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}